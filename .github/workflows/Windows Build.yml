name: Windows build

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false

    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      BUILD_TYPE: Release

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: powershell
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"


      - name: Install tools via Chocolatey
        run: |
          choco install -y cmake git wixtoolset 7zip ninja

      - name: Install vcpkg
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.bat
          vcpkg update

      - name: Add vcpkg to PATH
        run: echo "${{ github.workspace }}\vcpkg" | Out-File -Append -FilePath $env:GITHUB_PATH

      - name: Install dependencies
        run: vcpkg install curl libarchive

      - name: Install Prebuilt LLVM
        uses: RickIsGone/install-llvm-stripped@v2
        with:
          output-dir: "${{ github.workspace }}/llvm"

      - name: Find LLVMConfig.cmake path
        id: find_llvm
        shell: powershell
        run: |
          $file = Get-ChildItem -Recurse "${{ github.workspace }}\llvm" -Filter "LLVMConfig.cmake" | Select-Object -First 1
          if ($null -eq $file) {
            Write-Error "LLVMConfig.cmake not found!"
            exit 1
          }
          $llvmDir = $file.DirectoryName
          echo "llvm-cmake-dir=$llvmDir" >> $env:GITHUB_OUTPUT

      - name: Configure CMake
        run: >
          cmake -B build -S .
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_TARGET_TRIPLET=x64-windows-static
          -DLLVM_DIR="${{ steps.find_llvm.outputs.llvm-cmake-dir }}"
          -Dzstd_DIR="${{ github.workspace }}\vcpkg\installed\x64-windows-static\share\zstd"
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}\llvm"
          -DCMAKE_BUILD_TYPE=Release
          -GNinja

      - name: Build
        run: cmake --build build

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Package with CPack
        working-directory: build
        run: cpack

      - name: Get version from latest tag
        id: get_version
        shell: bash
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Upload Windows 7z artifact
        uses: actions/upload-artifact@v4
        with:
          name: tungsten.7z
          path: build/*.7z

      - name: Upload Windows zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: tungsten.zip
          path: build/*.zip

      - name: Upload Windows msi artifact
        uses: actions/upload-artifact@v4
        with:
          name: tungsten.msi
          path: build/*.msi
